// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  username String
  userHandle String @unique
  password String
  userTweets String[] 
  followerCount Int @default(0)
  followingCount Int @default(0)
  accountCreatedAt DateTime @default(now())
  tweets Tweet[] @relation("UserTweets")
  sessions Session []


  followers    User[]   @relation("UserFollows", fields: [followersIDs], references: [id])
  followersIDs String[] @db.ObjectId
  following    User[]   @relation("UserFollows", fields: [followingIDs], references: [id])
  followingIDs  String[] @db.ObjectId

  likedTweetsId String[] @db.ObjectId
  likedTweets Tweet[] @relation("LikedTweets", fields: [likedTweetsId], references: [id])

  bookmarkedTweetsId String[] @db.ObjectId
  bookmarkedTweets Tweet[] @relation("BookmarkedTweets", fields: [bookmarkedTweetsId], references: [id])

  messagesSentId String[] @db.ObjectId
  messagesSent Message[] @relation("Sender")

  messagesReceivedId String[] @db.ObjectId
  messagesReceived Message[] @relation("Receiver")
  


}

model Tweet {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  createdAt DateTime @default(now())
  authorId String @db.ObjectId
  author User @relation("UserTweets", fields: [authorId], references: [id], onDelete: Cascade)
  
  likedById String[] @db.ObjectId
  likedBy User[] @relation("LikedTweets", fields: [likedById], references: [id])

  bookmarkedById String[] @db.ObjectId
  bookmarkedBy User[] @relation("BookmarkedTweets", fields: [bookmarkedById], references: [id])

}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  senderId String @db.ObjectId
  receiverId String @db.ObjectId

  sender User @relation("Sender", fields: [senderId], references: [id])
  receiver User @relation("Receiver", fields: [receiverId], references: [id])

  content String
  createdAt DateTime @default(now())
}

model Session {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String @unique
  userId String @db.ObjectId
  expires DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}






